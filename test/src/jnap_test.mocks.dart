// Mocks generated by Mockito 5.4.6 from annotations
// in jnap/test/src/jnap_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i6;
import 'dart:typed_data' as _i8;

import 'package:http/http.dart' as _i2;
import 'package:jnap/http.dart' as _i4;
import 'package:jnap/jnap.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamedResponse_0 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJNAPSuccess_2 extends _i1.SmartFake implements _i3.JNAPSuccess {
  _FakeJNAPSuccess_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJNAPTransactionSuccessWrap_3 extends _i1.SmartFake
    implements _i3.JNAPTransactionSuccessWrap {
  _FakeJNAPTransactionSuccessWrap_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i4.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get timeoutMs => (super.noSuchMethod(
        Invocation.getter(#timeoutMs),
        returnValue: 0,
      ) as int);

  @override
  int get retries => (super.noSuchMethod(
        Invocation.getter(#retries),
        returnValue: 0,
      ) as int);

  @override
  set timeoutMs(int? ms) => super.noSuchMethod(
        Invocation.setter(
          #timeoutMs,
          ms,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set retries(int? times) => super.noSuchMethod(
        Invocation.setter(
          #retries,
          times,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i5.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_0(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i5.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
    bool? ignoreResponse = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {
            #headers: headers,
            #ignoreResponse: ignoreResponse,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #get,
            [url],
            {
              #headers: headers,
              #ignoreResponse: ignoreResponse,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> download(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #download,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> upload(
    Uri? url,
    List<_i2.MultipartFile>? multipartList, {
    Map<String, String>? headers,
    Map<String, String>? fields,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #upload,
          [
            url,
            multipartList,
          ],
          {
            #headers: headers,
            #fields: fields,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #upload,
            [
              url,
              multipartList,
            ],
            {
              #headers: headers,
              #fields: fields,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);

  @override
  _i5.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i8.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
      ) as _i5.Future<_i8.Uint8List>);
}

/// A class which mocks [Jnap].
///
/// See the documentation for Mockito's code generation for more information.
class MockJnap extends _i1.Mock implements _i3.Jnap {
  MockJnap() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i3.JNAPResult> scheduled({
    required _i3.JNAPAction? action,
    Map<String, dynamic>? data = const {},
    Map<String, String>? headers = const {},
    _i3.JNAPConfigOverrides? overrides,
    int? retryDelayInMilliSec = 5000,
    int? maxRetry = 10,
    int? firstDelayInMilliSec = 3000,
    bool Function(_i3.JNAPResult)? condition,
    int? requestTimeoutOverride,
    bool? auth = false,
    void Function(
      _i3.JNAPResult?,
      Object?,
    )? onComplete,
    _i4.HttpClient? httpClient,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduled,
          [],
          {
            #action: action,
            #data: data,
            #headers: headers,
            #overrides: overrides,
            #retryDelayInMilliSec: retryDelayInMilliSec,
            #maxRetry: maxRetry,
            #firstDelayInMilliSec: firstDelayInMilliSec,
            #condition: condition,
            #requestTimeoutOverride: requestTimeoutOverride,
            #auth: auth,
            #onComplete: onComplete,
            #httpClient: httpClient,
          },
        ),
        returnValue: _i5.Stream<_i3.JNAPResult>.empty(),
      ) as _i5.Stream<_i3.JNAPResult>);

  @override
  _i5.Future<_i3.JNAPSuccess> send({
    required _i3.JNAPAction? action,
    Map<String, dynamic>? data = const {},
    Map<String, String>? headers = const {},
    _i3.JNAPConfigOverrides? overrides,
    _i3.JNAPSideEffectOverrides? sideEffectOverrides,
    _i4.HttpClient? httpClient,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [],
          {
            #action: action,
            #data: data,
            #headers: headers,
            #overrides: overrides,
            #sideEffectOverrides: sideEffectOverrides,
            #httpClient: httpClient,
          },
        ),
        returnValue: _i5.Future<_i3.JNAPSuccess>.value(_FakeJNAPSuccess_2(
          this,
          Invocation.method(
            #send,
            [],
            {
              #action: action,
              #data: data,
              #headers: headers,
              #overrides: overrides,
              #sideEffectOverrides: sideEffectOverrides,
              #httpClient: httpClient,
            },
          ),
        )),
      ) as _i5.Future<_i3.JNAPSuccess>);

  @override
  _i5.Future<_i3.JNAPTransactionSuccessWrap> transaction({
    required _i3.JNAPTransactionBuilder? transactionBuilder,
    Map<String, String>? headers = const {},
    _i3.JNAPConfigOverrides? overrides,
    _i3.JNAPSideEffectOverrides? sideEffectOverrides,
    _i4.HttpClient? httpClient,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [],
          {
            #transactionBuilder: transactionBuilder,
            #headers: headers,
            #overrides: overrides,
            #sideEffectOverrides: sideEffectOverrides,
            #httpClient: httpClient,
          },
        ),
        returnValue: _i5.Future<_i3.JNAPTransactionSuccessWrap>.value(
            _FakeJNAPTransactionSuccessWrap_3(
          this,
          Invocation.method(
            #transaction,
            [],
            {
              #transactionBuilder: transactionBuilder,
              #headers: headers,
              #overrides: overrides,
              #sideEffectOverrides: sideEffectOverrides,
              #httpClient: httpClient,
            },
          ),
        )),
      ) as _i5.Future<_i3.JNAPTransactionSuccessWrap>);
}
