// Mocks generated by Mockito 5.4.6 from annotations
// in jnap/test/src/functions/polling/polling_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:jnap/jnap.dart' as _i2;
import 'package:jnap/src/functions/polling/interfaces.dart' as _i3;
import 'package:jnap/src/functions/polling/polling_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJNAPTransactionSuccessWrap_0 extends _i1.SmartFake
    implements _i2.JNAPTransactionSuccessWrap {
  _FakeJNAPTransactionSuccessWrap_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePollingConfig_2 extends _i1.SmartFake implements _i3.PollingConfig {
  _FakePollingConfig_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PollingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPollingService extends _i1.Mock implements _i4.PollingService {
  MockPollingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<MapEntry<_i2.JNAPAction, Map<String, dynamic>>>
      get pollingTransactions => (super.noSuchMethod(
            Invocation.getter(#pollingTransactions),
            returnValue: <MapEntry<_i2.JNAPAction, Map<String, dynamic>>>[],
          ) as List<MapEntry<_i2.JNAPAction, Map<String, dynamic>>>);

  @override
  set pollingTransactions(
          List<MapEntry<_i2.JNAPAction, Map<String, dynamic>>>?
              _pollingTransactions) =>
      super.noSuchMethod(
        Invocation.setter(
          #pollingTransactions,
          _pollingTransactions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.JNAPTransactionSuccessWrap> doPolling({bool? force = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #doPolling,
          [],
          {#force: force},
        ),
        returnValue: _i5.Future<_i2.JNAPTransactionSuccessWrap>.value(
            _FakeJNAPTransactionSuccessWrap_0(
          this,
          Invocation.method(
            #doPolling,
            [],
            {#force: force},
          ),
        )),
      ) as _i5.Future<_i2.JNAPTransactionSuccessWrap>);
}

/// A class which mocks [PollingConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockPollingConfig extends _i1.Mock implements _i3.PollingConfig {
  MockPollingConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get refreshInterval => (super.noSuchMethod(
        Invocation.getter(#refreshInterval),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#refreshInterval),
        ),
      ) as Duration);

  @override
  int get pollFirstDelayInSec => (super.noSuchMethod(
        Invocation.getter(#pollFirstDelayInSec),
        returnValue: 0,
      ) as int);

  @override
  bool get isPaused => (super.noSuchMethod(
        Invocation.getter(#isPaused),
        returnValue: false,
      ) as bool);

  @override
  set refreshInterval(Duration? _refreshInterval) => super.noSuchMethod(
        Invocation.setter(
          #refreshInterval,
          _refreshInterval,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set pollFirstDelayInSec(int? _pollFirstDelayInSec) => super.noSuchMethod(
        Invocation.setter(
          #pollFirstDelayInSec,
          _pollFirstDelayInSec,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isPaused(bool? _isPaused) => super.noSuchMethod(
        Invocation.setter(
          #isPaused,
          _isPaused,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.PollingConfig copyWith({
    Duration? refreshInterval,
    int? pollFirstDelayInSec,
    bool? isPaused,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #refreshInterval: refreshInterval,
            #pollFirstDelayInSec: pollFirstDelayInSec,
            #isPaused: isPaused,
          },
        ),
        returnValue: _FakePollingConfig_2(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #refreshInterval: refreshInterval,
              #pollFirstDelayInSec: pollFirstDelayInSec,
              #isPaused: isPaused,
            },
          ),
        ),
      ) as _i3.PollingConfig);
}

/// A class which mocks [PollingAdditionalTasks].
///
/// See the documentation for Mockito's code generation for more information.
class MockPollingAdditionalTasks extends _i1.Mock
    implements _i3.PollingAdditionalTasks {
  MockPollingAdditionalTasks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> additionalPolling() => (super.noSuchMethod(
        Invocation.method(
          #additionalPolling,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [PollingCompletedNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPollingCompletedNotifier extends _i1.Mock
    implements _i3.PollingCompletedNotifier {
  MockPollingCompletedNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onPollingFailed() => super.noSuchMethod(
        Invocation.method(
          #onPollingFailed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPollingSuccess() => super.noSuchMethod(
        Invocation.method(
          #onPollingSuccess,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Timer].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimer extends _i1.Mock implements _i5.Timer {
  MockTimer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get tick => (super.noSuchMethod(
        Invocation.getter(#tick),
        returnValue: 0,
      ) as int);

  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
      ) as bool);

  @override
  void cancel() => super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
